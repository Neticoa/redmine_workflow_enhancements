<%
 trackers = Array(trackers)
 roles = Array(roles)
 minimal = false if local_assigns[:minimal].nil?
 issue ||= nil
 project_roles = @project.users_by_role.map{ |x| x[0][:id] } unless @project.nil?
%>
<% if trackers.length == 1 %>
  <%= javascript_include_tag "d3.v3.min.js", :plugin => :redmine_workflow_enhancements %>
  <%= javascript_include_tag "dagre-d3.min.js", :plugin => :redmine_workflow_enhancements %>
  <%= javascript_include_tag "saveSvgAsPng.js", :plugin => :redmine_workflow_enhancements %>

  <div class="<%= minimal ? "" : "box" %>">
    <% unless minimal %>
      <div class="contextual" style="display:none;" id="graphContextual">
        <a class="icon icon-save" id="graphSavePng"><%= l(:button_save) %></a>
      </div>
    <% end %>
    <h4 style="<%= minimal ? "display:none;" : '' %>">
      <%= l(:label_workflow) %>: <%= trackers.first.name %>
      <% unless roles.empty? %>
        - <%= roles.length == 1 ? l(:label_role) : l(:label_role_plural) %>:
        <%= roles.map(&:name).join(', ') %>
      <% end %>
    </h4>
    <div class="workflowGraph">
      <svg id="workflow-vis" width="800" height="600">
        <g transform="translate(20,20)"/>
      </svg>
    </div>
  </div>

  <script type="text/javascript">
  $(function() {
    var json = <%= WorkflowEnhancements::Graph.load_data(roles, trackers, issue, project_roles).to_json.html_safe %>;

    var renderer = new dagreD3.Renderer();
    var oldDrawNodes = renderer.drawNodes();
    renderer.drawNodes(function(graph, root) {
      var svgNodes = oldDrawNodes(graph, root);
      svgNodes.attr("id", function(u) { return "node-" + u; });
      svgNodes.attr('class', function(u) {
        var cls = graph.node(u).nodeclass || '';
        return 'node ' + cls;
      });
      return svgNodes;
    });

    var oldDrawEdgePaths = renderer.drawEdgePaths();
    renderer.drawEdgePaths(function(graph, root) {
      var svgEdgePaths = oldDrawEdgePaths(graph, root);
      svgEdgePaths.attr('class', function(u) {
        var cls = graph.edge(u).edgeclass || '';
        return 'edgePath ' + cls;
      });
      return svgEdgePaths;
    });

    var layout = dagreD3.layout()
      .edgeSep(12)
      .nodeSep(40)
      .rankSep(50)
      .rankDir("LR");
    layout = renderer.layout(layout).run(dagreD3.json.decode(json.nodes, json.edges), d3.select("#workflow-vis g"));

    var gw = layout.graph().width;
    var gh = layout.graph().height;
    var w = Math.min($(window).width() * 0.8, gw);
    var h = Math.min($(window).height() * 0.8, gh);
    var s = Math.min(w / gw, h / gh);
    d3.select("svg").attr("width", w + 40).attr("height", h + 40);
    if (s < 1) {
      d3.select("svg").attr("transform", "scale(" + s + ")");
    }

    <% unless minimal %>
      // save as PNG only works in Firefox and Chrome
      if (/firefox/i.test(navigator.userAgent) || /chrome/i.test(navigator.userAgent)) {
        $('#graphContextual').show();
        $('#graphSavePng').click(function() {
          saveSvgAsPng(document.getElementById("workflow-vis"), "workflow.png", 3);
        });
      }
    <% end %>
  });
  </script>
<% end %>


